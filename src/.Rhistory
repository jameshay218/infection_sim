popt <- 0.01
grebbons <- read.csv(greb)
plot(as.mcmc(grebbons))
popt <- 0.1
grebbons <- read.csv(greb)
plot(as.mcmc(grebbons))
startpars
startpars <- as.integer(runif(3,0,800))
grebbons <- read.csv(greb)
plot(as.mcmc(grebbons))
adaptive_period
adaptive_period <- 1000000
adaptive_period
iterations
iterations <- 5000000
burnin <- 1000000
thin
thin <- 100
grebbons <- read.csv(greb)
plot(as.mcmc(grebbons))
iterations <- 10000000
grebbons <- read.csv(greb)
plot(as.mcmc(grebbons))
dat2
m_pars
m_pars[1,] <- c(0.0002, 0.0002,0.0002)
m_pars[2,] <- c(0.0002, 0.0002,0.0002)
m_pars[3,] <- c(0.0002, 0.0002,0.0002)
grebbons <- read.csv(greb)
plot(as.mcmc(grebbons))
which.max(grebbons[,5])
grebbons[675,]
1/1000
m_pars[1,] <- c(0.001,0.001,0.001)
m_pars[2,] <- c(0.001,0.001,0.001)
m_pars[3,] <- c(0.001,0.001,0.001)
grebbons <- read.csv(greb)
plot(as.mcmc(grebbons))
popt
1/365
dat2 <- individual_simulation(ti_pars, mu_pars, tp_pars, m_pars, seq(0,500,by=5))
plot(dat2[,2])
plot(dat2[,3])
plot(dat2[,4])
plot(dat2[,5])
dat3 <- dat2[c(1,91),]
dat3
times <- dat3[,1]
dat2 <- unname(as.matrix(floor(dat3[,c(2,3,4)])))
dat2
startpars
param_table
startpars <- c(155,451,58)
param_table[,4] <- c(500,500,500)
times
grebbons <- read.csv(greb)
plot(as.mcmc(grebbons))
dat2 <- individual_simulation(c(45,200,1000), mu_pars, tp_pars, m_pars, seq(0,500,by=5))
dat2 <- dat2[c(1,81),]
dat2
time <- dat2[,1]
time
times <- time
dat2 <- unname(as.matrix(floor(dat2[,c(2,3,4))))
dat2 <- unname(as.matrix(floor(dat2[,c(2,3,4)])))
dat2
grebbons <- read.csv(greb)
plot(as.mcmc(grebbons))
thin
get_infection_ratios(grebbons,100,burnin,adaptive_period,600)
get_infection_ratios(grebbons,100,burnin,adaptive_period,400)
get_infection_ratios(grebbons,100,burnin,adaptive_period,400)
thin
times
plot(as.mcmc(grebbons))
length(grebbons[grebbons[,4] < 400,4])
nrow(grebbons)
burnin
adaptive_period
2e6/100
nrow(grebbons)
tmp <- grebbons[20000:nrow(grebbons),]
length(tmp[tmp[,4] < 400, 4])
length(tmp[,4])
get_infection_ratios(grebbons,100,burnin,adaptive_period,400)
utils::View(survey_sim)
dat2
dat2[,2] <- c(10,1,9)
dat2[2,] <- c(10,1,9)
times
times <- C(13,525)
times <- c(13,525)
grebbons <- read.csv(greb)
plot(as.mcmc(grebbons))
param_table
param_table[,4] <- c(912,912,912)
startpars
grebbons <- read.csv(greb)
plot(as.mcmc(grebbons))
dat2
get_infection_ratios(grebbons,100,burnin,adaptive_period,times[2])
times[2]
param_table
plot(as.mcmc(grebbons))
popt
dat2[2,] <- c(1,7,3)
times <- c(14,526)
grebbons <- read.csv(greb)
plot(as.mcmc(grebbons))
get_infection_ratios(grebbons,100,burnin,adaptive_period,times[2])
tmpname
strains
utils::View(dat)
utils::View(dat)
utils::View(dat)
iterations
iterations <- 1000000
adaptive_period
sourceCpp("~/Documents/infection_sim/src/infection_funcs.cpp")


infer_infections <- function(survey_dat, param_table, iterations, popt, opt_freq, thin, burnin, adaptive_period, mu_pars, tp_pars, m_pars, control_pars, end, n){
    final <- survey_dat
    for(i in 1:n){
        print(paste("Inference on individual number ", i, sep=""))
        tmp <- survey_dat[i,]
        print(tmp)
        dat <- matrix(nrow=2,ncol=4)
        dat[1,] <- unname(as.numeric(tmp[1:4]))
        dat[1,] <- unname(as.numeric(tmp[5:8]))
        start_pars <- as.integer(runif(3, 0, end))
        times <- dat[1,]
        dat2 <- dat[,c(2,3,4)]
        print("Data: ")
        print(dat)
        print("Start parameters: ")
        print(startpars)
        file <- run_MCMC(
            startpars,
            dat2,
            times,
            param_table,
            iterations,
            popt,
            opt_freq,
            thin,
            burnin,
            adaptive_period,
            paste("individual_",i,sep=""),
            500,
            mu_pars,
            tp_pars,
            m_pars,
            control_pars
            )
        chain <- as.mcmc(read.csv(file))
        inference <- get_infection_ratios(chain, thin, burnin, adaptive_period, times[2])
        print(inference)
    }



}



infer_infections <- function(survey_dat, param_table, iterations, popt, opt_freq, thin, burnin, adaptive_period, mu_pars, tp_pars, m_pars, control_pars, end, n){
    final <- survey_dat
    for(i in 1:n){
        print(paste("Inference on individual number ", i, sep=""))
        tmp <- survey_dat[i,]
        print(tmp)
        dat <- matrix(nrow=2,ncol=4)
        dat[1,] <- unname(as.numeric(tmp[1:4]))
        dat[2,] <- unname(as.numeric(tmp[5:8]))
        start_pars <- as.integer(runif(3, 0, end))
        times <- dat[1,]
        dat2 <- dat[,c(2,3,4)]
        print("Data: ")
        print(dat)
        print("Start parameters: ")
        print(startpars)
        file <- run_MCMC(
            startpars,
            dat2,
            times,
            param_table,
            iterations,
            popt,
            opt_freq,
            thin,
            burnin,
            adaptive_period,
            paste("individual_",i,sep=""),
            500,
            mu_pars,
            tp_pars,
            m_pars,
            control_pars
            )
        chain <- as.mcmc(read.csv(file))
        inference <- get_infection_ratios(chain, thin, burnin, adaptive_period, times[2])
        print(inference)
    }



}

getwd()
greb <- read.csv("individual_1.csv")
greb <- read.csv("individual_1_chain.csv")
plot(as.mcmc(greb))
greb <- read.csv("individual_2_chain.csv")
plot(as.mcmc(greb))
param_table

infer_infections <- function(survey_dat, param_table, iterations, popt, opt_freq, thin, burnin, adaptive_period, mu_pars, tp_pars, m_pars, control_pars, end, n){
    final <- survey_dat
    for(i in 1:n){
        print(paste("Inference on individual number ", i, sep=""))
        tmp <- survey_dat[i,]
        dat <- matrix(nrow=2,ncol=4)
        dat[1,] <- unname(as.numeric(tmp[1:4]))
        dat[2,] <- unname(as.numeric(tmp[5:8]))
        start_pars <- as.integer(runif(3, 0, end))
        times <- dat[,1]
        dat2 <- dat[,c(2,3,4)]
        print("Data: ")
        print(dat)
        print("Start parameters: ")
        print(startpars)
        file <- run_MCMC(
            startpars,
            dat2,
            times,
            param_table,
            iterations,
            popt,
            opt_freq,
            thin,
            burnin,
            adaptive_period,
            paste("individual_",i,sep=""),
            500,
            mu_pars,
            tp_pars,
            m_pars,
            control_pars
            )
        chain <- as.mcmc(read.csv(file))
        inference <- get_infection_ratios(chain, thin, burnin, adaptive_period, times[2])
        print(inference)
    }



}

strains

infer_infections <- function(survey_dat, param_table, iterations, popt, opt_freq, thin, burnin, adaptive_period, mu_pars, tp_pars, m_pars, control_pars, end, n){
    final <- survey_dat[1:n,]
    results <- matrix(ncol=3,nrow=n)
    for(i in 1:n){
        print(paste("Inference on individual number ", i, sep=""))
        tmp <- survey_dat[i,]
        dat <- matrix(nrow=2,ncol=4)
        dat[1,] <- unname(as.numeric(tmp[1:4]))
        dat[2,] <- unname(as.numeric(tmp[5:8]))
        start_pars <- as.integer(runif(3, 0, end))
        times <- dat[,1]
        dat2 <- dat[,c(2,3,4)]
        print("Data: ")
        print(dat)
        print("Start parameters: ")
        print(startpars)
        file <- run_MCMC(
            startpars,
            dat2,
            times,
            param_table,
            iterations,
            popt,
            opt_freq,
            thin,
            burnin,
            adaptive_period,
            paste("individual_",i,sep=""),
            500,
            mu_pars,
            tp_pars,
            m_pars,
            control_pars
            )
        chain <- as.mcmc(read.csv(file))
        inference <- get_infection_ratios(chain, thin, burnin, adaptive_period, times[2])
        print("Ratios of infection times:")
        print(inference)
        results[i,] <- inference
    }
    results <- as.data.frame(results)
    colnames(results) <- c("H3N2 Inference", "H5N1 Inference", "H1N1 Inference")
    return(cbind(final,results))
}

iterations
iterations <- 100000
adaptive_period <- 100000
burnin <- 100000
thin <- 10

infer_infections <- function(survey_dat, param_table, iterations, popt, opt_freq, thin, burnin, adaptive_period, mu_pars, tp_pars, m_pars, control_pars, end, n){
    final <- survey_dat[1:n,]
    results <- matrix(ncol=3,nrow=n)
    for(i in 1:n){
        print(paste("Inference on individual number ", i, sep=""))
        tmp <- survey_dat[i,]
        dat <- matrix(nrow=2,ncol=4)
        dat[1,] <- unname(as.numeric(tmp[1:4]))
        dat[2,] <- unname(as.numeric(tmp[5:8]))
        startpars <- as.integer(runif(3, 0, end))
        times <- dat[,1]
        dat2 <- dat[,c(2,3,4)]
        print("Data: ")
        print(dat)
        print("Start parameters: ")
        print(startpars)
        file <- run_MCMC(
            startpars,
            dat2,
            times,
            param_table,
            iterations,
            popt,
            opt_freq,
            thin,
            burnin,
            adaptive_period,
            paste("individual_",i,sep=""),
            500,
            mu_pars,
            tp_pars,
            m_pars,
            control_pars
            )
        chain <- as.mcmc(read.csv(file))
        inference <- get_infection_ratios(chain, thin, burnin, adaptive_period, times[2])
        print("Ratios of infection times:")
        print(inference)
        results[i,] <- inference
    }
    results <- as.data.frame(results)
    colnames(results) <- c("H3N2 Inference", "H5N1 Inference", "H1N1 Inference")
    return(cbind(final,results))
}

results
utils::View(results)
hist(survey_sim[,2])
hist(survey_sim[,3])
hist(survey_sim[,4])
hist(survey_sim[,5])
hist(survey_sim[,6])
hist(survey_sim[,7])
hist(survey_sim[,8])
iterations
end
individuals
S
utils::View(results)
write.csv(results,"results.csv")
infection_risks
control_parameters
control_pars
iterations
burnin
popt
getwd()
greb <- read.csv("/chains/individual_5_chain.csv")
getwd()
setwd("/chains/")
setwd(paste(getwd(),"/chains/",sep=""))
getwd()
greb <- read.csv("individual_1_chain.csv")
plot(as.mcmc(greb))
plot_mcmc("individual_1_chain.csv",100000,100000,100)
thin
plot_mcmc("individual_1_chain.csv",burnin,adaptive_period,thin)
plot_mcmc("individual_2_chain.csv",burnin,adaptive_period,thin)
plot_mcmc("individual_3_chain.csv",burnin,adaptive_period,thin)
plot_mcmc("individual_5_chain.csv",burnin,adaptive_period,thin)
plot_mcmc("individual_6_chain.csv",burnin,adaptive_period,thin)
plot_mcmc("individual_7_chain.csv",burnin,adaptive_period,thin)
plot_mcmc("individual_7_chain.csv",burnin,adaptive_period,thin)
plot_mcmc(1,"individual_7_chain.csv",burnin,adaptive_period,thin)
choice
filename
choice
10000
quit()
n
library(serosim)
inc <- generate_to_inc(0.4, 912, 400,600)
inc <- generate_toy_inc(0.4, 912, 400,600)
greb <- load.and.merge.V1.V2()
greb <- load.and.merge.part.V1.V2()
colnames(fluscape_data)
#' Simulation sample size
n <- 500

#' Fluscape strains to be simulated, as discussed. You can change these as long as they match the Fluscape column names. eg. HI.H3N2.1971.V1 goes to H3N2.1971, and function will handle the rest
fluscape_strains <- c("H3N2.2007", "CKH9N2.2008", "H1N1.2009")

#' Homologous boosting 3 log units, as in Kucharski. Symmetric CR between H9 and H3 1 log unit
mu_pars <- matrix(c(3,1,0,1,3,0,0,0,3),nrow=3,ncol=3)
#' 21 days from infection to peak titre for all boosts
tp_pars <- matrix(c(21,21,21,21,21,21,21,21,21),nrow=3,ncol=3)
#' No antibody waning
m_pars <- matrix(c(0,0,0,0,0,0,0,0,0),nrow=3,ncol=3)

#' Flag for stochastic boosting
STOCHASTIC <- TRUE

#' Generate incidence vectors
#' Empty list - will have one item for each strain
incVectors <- list()
#' H3N2 - 40% of people get infected between days 400 and 600
incVectors[[1]] <- generate_toy_inc(0.4, 900, 400, 600)
#' H9N2 - 10% of people get infected between days 200 and 700
incVectors[[2]] <- generate_toy_inc(0.1, 900, 200, 700)
#' H1N1 - 50% of people get infected between days 500 and 700
incVectors[[3]] <- generate_toy_inc(0.5, 900, 500, 700)

sim_dat <- fluscape_simulation(fluscape_data, n, fluscape_strains, mu_pars, tp_pars, m_pars, STOCHASTIC, incVectors, removeOutliers=TRUE, fluscapeT0=TRUE, addNoise=TRUE, plotSerology=TRUE)

fluscape_simulation
incVectors
incVectors[[1]]

sim_dat <- fluscape_simulation(fluscape_data, n, fluscape_strains, mu_pars, tp_pars, m_pars, STOCHASTIC, incVectors, removeOutliers=TRUE, fluscapeT0=TRUE, addNoise=TRUE, plotSerology=TRUE)

multiple_strains <- function(tis, y0, params, times){
    #' Create matrix with a column for each infection and a column for times
    dat <- matrix(ncol=length(tis)+1, nrow=length(times))
    dat[,1] <- times

    #' Sort infection times into ascending order and store indices of sorted order. Add this to list of process parameters if needed
    actual_ti <- sort(tis,index.return=TRUE)
    indices <- actual_ti$ix
    tis <- actual_ti$x

    #' Extract parameters from list
    mu_pars <- params[[1]]
    tp_pars <- params[[2]]
    m_pars <- params[[3]]
    STOCHASTIC <- params[[4]]

    #' For each strain, calculate the single trajectory
    for(i in 2:(length(tis)+1)){
        mu <- mu_pars[i-1,]
        #' If stochastic boosting required, generate mu from poisson distribution
        if(STOCHASTIC) mu <- rpois(length(mu),mu)
        dat[,i] <- single_strain(mu[indices], tp_pars[i-1,indices],m_pars[i-1,indices], tis, y0[i-1],times)
    }
    return(dat)    
}

sim_dat <- fluscape_simulation(fluscape_data, n, fluscape_strains, mu_pars, tp_pars, m_pars, STOCHASTIC, incVectors, removeOutliers=TRUE, fluscapeT0=TRUE, addNoise=TRUE, plotSerology=TRUE)

multiple_strains
library(devtools)
#' old install command
#' install_github("serosim","jameshay218")
install_github("jameshay218/serosim")
library(serosim)

sim_dat <- fluscape_simulation(fluscape_data, n, fluscape_strains, mu_pars, tp_pars, m_pars, STOCHASTIC, incVectors, removeOutliers=TRUE, fluscapeT0=TRUE, addNoise=TRUE, plotSerology=TRUE)
single_strain
multiple_strains
single_strain
SIRsim
cum_inc
install_github("serosim","jameshay218")
library(serosim)
SIRsim
install_github("jameshay218/
install_github("jameshay218/serosim")
library(serosim)
cum_inc
single_strain
install_github("jameshay218/serosim")
library(serosim)
cum_inc
single_strain
SIRsim

sim_dat <- fluscape_simulation(fluscape_data, n, fluscape_strains, mu_pars, tp_pars, m_pars, STOCHASTIC, incVectors, removeOutliers=TRUE, fluscapeT0=TRUE, addNoise=TRUE, plotSerology=TRUE)
single_strain(c(3,1,0),c(21,21,21),c(0,0,0),c(0,45,70),0, seq(1,100,by=1))
multiple_strains <- function(tis, y0, params, times){
    #' Create matrix with a column for each infection and a column for times
    dat <- matrix(ncol=length(tis)+1, nrow=length(times))
    dat[,1] <- times

    #' Sort infection times into ascending order and store indices of sorted order. Add this to list of process parameters if needed
    actual_ti <- sort(tis,index.return=TRUE)
    indices <- actual_ti$ix
    tis <- actual_ti$x

    #' Extract parameters from list
    mu_pars <- params[[1]]
    tp_pars <- params[[2]]
    m_pars <- params[[3]]
    STOCHASTIC <- params[[4]]

    #' For each strain, calculate the single trajectory
    for(i in 2:(length(tis)+1)){
        mu <- mu_pars[i-1,]
        #' If stochastic boosting required, generate mu from poisson distribution
        if(STOCHASTIC) mu <- rpois(length(mu),mu)
        print(mu)
        print(tp_pars[i-1])
        print(m_pars[i-1])
        print(tis)
        dat[,i] <- single_strain(mu[indices], tp_pars[i-1,indices],m_pars[i-1,indices], tis, y0[i-1],times)
    }
    return(dat)    
}

sim_dat <- fluscape_simulation(fluscape_data, n, fluscape_strains, mu_pars, tp_pars, m_pars, STOCHASTIC, incVectors, removeOutliers=TRUE, fluscapeT0=TRUE, addNoise=TRUE, plotSerology=TRUE)
multiple_strains
multiple_strains(c(0,45,70),c(0,0,0),list(mu_pars,tp_pars,m_pars,TRUE),seq(0,100,by=1))
install_github("jameshay218/serosim")
library(serosim)
multiple_strains(c(0,45,70),c(0,0,0),list(mu_pars,tp_pars,m_pars,TRUE),seq(0,100,by=1))
y <- multiple_strains(c(0,45,70),c(0,0,0),list(mu_pars,tp_pars,m_pars,TRUE),seq(0,100,by=1))
y

sim_dat <- fluscape_simulation(fluscape_data, n, fluscape_strains, mu_pars, tp_pars, m_pars, STOCHASTIC, incVectors, removeOutliers=TRUE, fluscapeT0=TRUE, addNoise=TRUE, plotSerology=TRUE)
tp_pars
single_strain(c(0,0,3),c(21,21,21),c(0,0,0),c(442,687,903),0,seq(0,900,by=1))
install_github("jameshay218/serosim")
library(serosim)
single_strain(c(0,0,3),c(21,21,21),c(0,0,0),c(442,687,903),0,seq(0,900,by=1))

sim_dat <- fluscape_simulation(fluscape_data, n, fluscape_strains, mu_pars, tp_pars, m_pars, STOCHASTIC, incVectors, removeOutliers=TRUE, fluscapeT0=TRUE, addNoise=TRUE, plotSerology=TRUE)
install_github("jameshay218/serosim")
library(serosim)

sim_dat <- fluscape_simulation(fluscape_data, n, fluscape_strains, mu_pars, tp_pars, m_pars, STOCHASTIC, incVectors, removeOutliers=TRUE, fluscapeT0=TRUE, addNoise=TRUE, plotSerology=TRUE)
install_github("jameshay218/serosim")
library(serosim)

sim_dat <- fluscape_simulation(fluscape_data, n, fluscape_strains, mu_pars, tp_pars, m_pars, STOCHASTIC, incVectors, removeOutliers=TRUE, fluscapeT0=TRUE, addNoise=TRUE, plotSerology=TRUE)
install_github("jameshay218/serosim")
library(serosim)

sim_dat <- fluscape_simulation(fluscape_data, n, fluscape_strains, mu_pars, tp_pars, m_pars, STOCHASTIC, incVectors, removeOutliers=TRUE, fluscapeT0=TRUE, addNoise=TRUE, plotSerology=TRUE)
install_github("jameshay218/serosim")
library(serosim)

sim_dat <- fluscape_simulation(fluscape_data, n, fluscape_strains, mu_pars, tp_pars, m_pars, STOCHASTIC, incVectors, removeOutliers=TRUE, fluscapeT0=TRUE, addNoise=TRUE, plotSerology=TRUE)
fluscape_strains
colnames(fluscape_data)
fluscape_strains
fluscape_strains[3] <- "H1N1.2009.PDM"

sim_dat <- fluscape_simulation(fluscape_data, n, fluscape_strains, mu_pars, tp_pars, m_pars, STOCHASTIC, incVectors, removeOutliers=TRUE, fluscapeT0=TRUE, addNoise=TRUE, plotSerology=TRUE)

sim_dat <- fluscape_simulation(fluscape_data, n, fluscape_strains, mu_pars, tp_pars, m_pars, STOCHASTIC, incVectors, removeOutliers=TRUE, fluscapeT0=TRUE, addNoise=TRUE, plotSerology=FALSE)
utils::View(sim_dat)

sim_dat <- fluscape_simulation(fluscape_data, n, fluscape_strains, mu_pars, tp_pars, m_pars, STOCHASTIC, incVectors, removeOutliers=TRUE, fluscapeT0=TRUE, addNoise=TRUE, plotSerology=TRUE)
library(plyr)

sim_dat <- fluscape_simulation(fluscape_data, n, fluscape_strains, mu_pars, tp_pars, m_pars, STOCHASTIC, incVectors, removeOutliers=TRUE, fluscapeT0=TRUE, addNoise=TRUE, plotSerology=TRUE)
getwd()

samples <- matrix(ncol=2,nrow=n)
samples[,1] <- 0
samples[,2] <- 800

#' Homologous boosting 3 log units, as in Kucharski. Symmetric CR between H9 and H3 1 log unit
mu_pars <- matrix(c(3,1,0,1,3,0,0,0,3),nrow=3,ncol=3)
#' 21 days from infection to peak titre for all boosts
tp_pars <- matrix(c(21,21,21,21,21,21,21,21,21),nrow=3,ncol=3)
#' No antibody waning
m_pars <- matrix(c(0,0,0,0,0,0,0,0,0),nrow=3,ncol=3)
processPars <- list(mu_pars, tp_pars, m_pars, TRUE)

y0s <- matrix(ncol=3,nrow=n)
y0s[,1] <- y0s[,2] <- y0s[,3] <- 0

start <- 0
end <- 900

sim_dat2 <- overall_simulation(n, c("H3N2","H9N2","H1N1"),incVectors, samples, processPars, y0s, start, end, addNoise=TRUE, noiseParams=c(0.79,0.2,8), logTitre=FALSE< discreteData=TRUE)

sim_dat2 <- overall_simulation(n, c("H3N2","H9N2","H1N1"),incVectors, samples, processPars, y0s, start, end, addNoise=TRUE, noiseParams=c(0.79,0.2,8), logTitre=FALSE, discreteData=TRUE)
sim_dat <- fluscape_simulation(fluscape_data, n, fluscape_strains, mu_pars, tp_pars, m_pars, STOCHASTIC, incVectors, removeOutliers=TRUE, fluscapeT0=TRUE, addNoise=c(FALSE,TRUE), plotSerology=TRUE)

sim_dat2 <- overall_simulation(n, c("H3N2","H9N2","H1N1"),incVectors, samples, processPars, y0s, start, end, addNoise=TRUE, noiseParams=c(0.79,0.2,8), logTitre=FALSE, discreteData=TRUE)

samples
isntall_github("jameshay218/serosim")
install_github("jameshay218/serosim")
library(serosim)

sim_dat2 <- overall_simulation(n, c("H3N2","H9N2","H1N1"),incVectors, samples, processPars, y0s, start, end, addNoise=TRUE, noiseParams=c(0.79,0.2,8), logTitre=FALSE, discreteData=TRUE)


sim_dat2 <- overall_simulation(n, c("H3N2","H9N2","H1N1"),incVectors, samples, processPars, y0s, start, end, addNoise=c(TRUE,TRUE), noiseParams=c(0.79,0.2,8), logTitre=FALSE, discreteData=TRUE)

install_github("jameshay218/serosim")
library(serosim)

sim_dat2 <- overall_simulation(n, c("H3N2","H9N2","H1N1"),incVectors, samples, processPars, y0s, start, end, addNoise=c(TRUE,TRUE), noiseParams=c(0.79,0.2,8), logTitre=FALSE, discreteData=TRUE)

utils::View(sim_dat2)
end
incVectors[[1]]
length(incVectors[[1]])
sim_dat <- fluscape_simulation(fluscape_data, n, fluscape_strains, mu_pars, tp_pars, m_pars, STOCHASTIC, incVectors, removeOutliers=TRUE, fluscapeT0=TRUE, addNoise=c(FALSE,TRUE), plotSerology=TRUE)


utils::View(sim_dat)
quit()
n
